// *** WARNING: this file was generated by Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Openai
{
    [OpenaiResourceType("openai:index:VectorStore")]
    public partial class VectorStore : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Optional OpenAI API key used for this specific resource.
        /// </summary>
        [Output("apiKey")]
        public Output<string?> ApiKey { get; private set; } = null!;

        /// <summary>
        /// The Unix timestamp (in seconds) for when the vector store was created.
        /// </summary>
        [Output("createdAt")]
        public Output<double> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// The expiration policy for the vector store.
        /// </summary>
        [Output("expiresAfter")]
        public Output<ImmutableDictionary<string, string>?> ExpiresAfter { get; private set; } = null!;

        /// <summary>
        /// The Unix timestamp (in seconds) for when the vector store will expire.
        /// </summary>
        [Output("expiresAt")]
        public Output<double?> ExpiresAt { get; private set; } = null!;

        /// <summary>
        /// The number of cancelled files in this vector store.
        /// </summary>
        [Output("fileCountCancelled")]
        public Output<double?> FileCountCancelled { get; private set; } = null!;

        /// <summary>
        /// Counts of files in the vector store by status.
        /// </summary>
        [Output("fileCounts")]
        public Output<ImmutableDictionary<string, string>?> FileCounts { get; private set; } = null!;

        /// <summary>
        /// A list of file IDs used in the vector store.
        /// </summary>
        [Output("fileIds")]
        public Output<ImmutableArray<string>> FileIds { get; private set; } = null!;

        /// <summary>
        /// The unique identifier for the vector store.
        /// </summary>
        [Output("id")]
        public Output<string> Id { get; private set; } = null!;

        /// <summary>
        /// The Unix timestamp (in seconds) for when the vector store was last active.
        /// </summary>
        [Output("lastActiveAt")]
        public Output<double?> LastActiveAt { get; private set; } = null!;

        /// <summary>
        /// Set of key-value pairs that can be used to store additional information about the vector store.
        /// </summary>
        [Output("metadata")]
        public Output<ImmutableDictionary<string, string>?> Metadata { get; private set; } = null!;

        /// <summary>
        /// The name of the vector store.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The object type, which is always 'vector_store'.
        /// </summary>
        [Output("object")]
        public Output<string> Object { get; private set; } = null!;

        /// <summary>
        /// The status of the vector store (e.g., 'completed', 'in_progress').
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// The number of bytes used by the vector store.
        /// </summary>
        [Output("usageBytes")]
        public Output<double?> UsageBytes { get; private set; } = null!;


        /// <summary>
        /// Create a VectorStore resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public VectorStore(string name, VectorStoreArgs args, CustomResourceOptions? options = null)
            : base("openai:index:VectorStore", name, args ?? new VectorStoreArgs(), MakeResourceOptions(options, ""))
        {
        }

        private VectorStore(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("openai:index:VectorStore", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "apiKey",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing VectorStore resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static VectorStore Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new VectorStore(name, id, options);
        }
    }

    public sealed class VectorStoreArgs : global::Pulumi.ResourceArgs
    {
        [Input("apiKey")]
        private Input<string>? _apiKey;

        /// <summary>
        /// Optional OpenAI API key to use for this specific resource.
        /// </summary>
        public Input<string>? ApiKey
        {
            get => _apiKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _apiKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("chunkingStrategy")]
        private InputMap<string>? _chunkingStrategy;

        /// <summary>
        /// The chunking strategy used to chunk files.
        /// </summary>
        public InputMap<string> ChunkingStrategy
        {
            get => _chunkingStrategy ?? (_chunkingStrategy = new InputMap<string>());
            set => _chunkingStrategy = value;
        }

        [Input("expiresAfter")]
        private InputMap<string>? _expiresAfter;

        /// <summary>
        /// The expiration policy for the vector store.
        /// </summary>
        public InputMap<string> ExpiresAfter
        {
            get => _expiresAfter ?? (_expiresAfter = new InputMap<string>());
            set => _expiresAfter = value;
        }

        [Input("fileIds")]
        private InputList<string>? _fileIds;

        /// <summary>
        /// A list of file IDs to be used in the vector store.
        /// </summary>
        public InputList<string> FileIds
        {
            get => _fileIds ?? (_fileIds = new InputList<string>());
            set => _fileIds = value;
        }

        [Input("metadata")]
        private InputMap<string>? _metadata;

        /// <summary>
        /// Set of key-value pairs that can be used to store additional information about the vector store.
        /// </summary>
        public InputMap<string> Metadata
        {
            get => _metadata ?? (_metadata = new InputMap<string>());
            set => _metadata = value;
        }

        /// <summary>
        /// The name of the vector store.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        public VectorStoreArgs()
        {
        }
        public static new VectorStoreArgs Empty => new VectorStoreArgs();
    }
}
