// *** WARNING: this file was generated by Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Openai
{
    [OpenaiResourceType("openai:index:Assistant")]
    public partial class Assistant : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Optional OpenAI API key used for this specific resource.
        /// </summary>
        [Output("apiKey")]
        public Output<string?> ApiKey { get; private set; } = null!;

        /// <summary>
        /// The Unix timestamp (in seconds) for when the assistant was created.
        /// </summary>
        [Output("createdAt")]
        public Output<double> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// A list of file IDs attached to this assistant.
        /// </summary>
        [Output("fileIds")]
        public Output<ImmutableArray<string>> FileIds { get; private set; } = null!;

        /// <summary>
        /// The unique identifier for the assistant.
        /// </summary>
        [Output("id")]
        public Output<string> Id { get; private set; } = null!;

        /// <summary>
        /// The system instructions that the assistant uses.
        /// </summary>
        [Output("instructions")]
        public Output<string?> Instructions { get; private set; } = null!;

        /// <summary>
        /// Set of key-value pairs that can be used to store additional information about the assistant.
        /// </summary>
        [Output("metadata")]
        public Output<ImmutableDictionary<string, string>?> Metadata { get; private set; } = null!;

        /// <summary>
        /// The model that the assistant uses.
        /// </summary>
        [Output("model")]
        public Output<string> Model { get; private set; } = null!;

        /// <summary>
        /// The name of the assistant.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The object type, which is always 'assistant'.
        /// </summary>
        [Output("object")]
        public Output<string> Object { get; private set; } = null!;

        /// <summary>
        /// The format of the response. Can be 'auto' or 'json_object'.
        /// </summary>
        [Output("responseFormat")]
        public Output<string?> ResponseFormat { get; private set; } = null!;

        /// <summary>
        /// What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
        /// </summary>
        [Output("temperature")]
        public Output<double?> Temperature { get; private set; } = null!;

        /// <summary>
        /// Tool resources for the assistant
        /// </summary>
        [Output("toolResources")]
        public Output<ImmutableDictionary<string, string>?> ToolResources { get; private set; } = null!;

        /// <summary>
        /// A list of tools enabled on the assistant.
        /// </summary>
        [Output("tools")]
        public Output<ImmutableArray<ImmutableDictionary<string, string>>> Tools { get; private set; } = null!;

        /// <summary>
        /// An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.
        /// </summary>
        [Output("topP")]
        public Output<double?> TopP { get; private set; } = null!;


        /// <summary>
        /// Create a Assistant resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Assistant(string name, AssistantArgs args, CustomResourceOptions? options = null)
            : base("openai:index:Assistant", name, args ?? new AssistantArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Assistant(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("openai:index:Assistant", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "apiKey",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Assistant resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Assistant Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new Assistant(name, id, options);
        }
    }

    public sealed class AssistantArgs : global::Pulumi.ResourceArgs
    {
        [Input("apiKey")]
        private Input<string>? _apiKey;

        /// <summary>
        /// Optional OpenAI API key to use for this specific resource.
        /// </summary>
        public Input<string>? ApiKey
        {
            get => _apiKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _apiKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("fileIds")]
        private InputList<string>? _fileIds;

        /// <summary>
        /// A list of file IDs attached to this assistant.
        /// </summary>
        public InputList<string> FileIds
        {
            get => _fileIds ?? (_fileIds = new InputList<string>());
            set => _fileIds = value;
        }

        /// <summary>
        /// The system instructions that the assistant uses.
        /// </summary>
        [Input("instructions")]
        public Input<string>? Instructions { get; set; }

        [Input("metadata")]
        private InputMap<string>? _metadata;

        /// <summary>
        /// Set of key-value pairs that can be used to store additional information about the assistant.
        /// </summary>
        public InputMap<string> Metadata
        {
            get => _metadata ?? (_metadata = new InputMap<string>());
            set => _metadata = value;
        }

        /// <summary>
        /// The model that the assistant will use (e.g., gpt-4, gpt-3.5-turbo).
        /// </summary>
        [Input("model", required: true)]
        public Input<string> Model { get; set; } = null!;

        /// <summary>
        /// The name of the assistant.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The format of the response. Can be 'auto' or 'json_object'.
        /// </summary>
        [Input("responseFormat")]
        public Input<string>? ResponseFormat { get; set; }

        /// <summary>
        /// What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
        /// </summary>
        [Input("temperature")]
        public Input<double>? Temperature { get; set; }

        [Input("toolResources")]
        private InputMap<string>? _toolResources;

        /// <summary>
        /// Tool resources for the assistant
        /// </summary>
        public InputMap<string> ToolResources
        {
            get => _toolResources ?? (_toolResources = new InputMap<string>());
            set => _toolResources = value;
        }

        [Input("tools")]
        private InputList<ImmutableDictionary<string, string>>? _tools;

        /// <summary>
        /// A list of tools enabled on the assistant.
        /// </summary>
        public InputList<ImmutableDictionary<string, string>> Tools
        {
            get => _tools ?? (_tools = new InputList<ImmutableDictionary<string, string>>());
            set => _tools = value;
        }

        /// <summary>
        /// An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.
        /// </summary>
        [Input("topP")]
        public Input<double>? TopP { get; set; }

        public AssistantArgs()
        {
        }
        public static new AssistantArgs Empty => new AssistantArgs();
    }
}
