// Code generated by Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package openai

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-openai/sdk/go/openai/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Assistant struct {
	pulumi.CustomResourceState

	// The Unix timestamp (in seconds) for when the assistant was created.
	CreatedAt pulumi.Float64Output `pulumi:"createdAt"`
	// A list of file IDs attached to this assistant.
	FileIds pulumi.StringArrayOutput `pulumi:"fileIds"`
	// The unique identifier for the assistant.
	Id pulumi.StringOutput `pulumi:"id"`
	// The system instructions that the assistant uses.
	Instructions pulumi.StringPtrOutput `pulumi:"instructions"`
	// Set of key-value pairs that can be used to store additional information about the assistant.
	Metadata pulumi.StringMapOutput `pulumi:"metadata"`
	// The model that the assistant uses.
	Model pulumi.StringOutput `pulumi:"model"`
	// The name of the assistant.
	Name pulumi.StringOutput `pulumi:"name"`
	// The object type, which is always 'assistant'.
	Object pulumi.StringOutput `pulumi:"object"`
	// The format of the response. Can be 'auto' or 'json_object'.
	ResponseFormat pulumi.StringPtrOutput `pulumi:"responseFormat"`
	// What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
	Temperature pulumi.Float64PtrOutput `pulumi:"temperature"`
	// Tool resources for the assistant
	ToolResources pulumi.StringMapOutput `pulumi:"toolResources"`
	// A list of tools enabled on the assistant.
	Tools pulumi.StringMapArrayOutput `pulumi:"tools"`
	// An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.
	TopP pulumi.Float64PtrOutput `pulumi:"topP"`
}

// NewAssistant registers a new resource with the given unique name, arguments, and options.
func NewAssistant(ctx *pulumi.Context,
	name string, args *AssistantArgs, opts ...pulumi.ResourceOption) (*Assistant, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Model == nil {
		return nil, errors.New("invalid value for required argument 'Model'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Assistant
	err := ctx.RegisterResource("openai:index:Assistant", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAssistant gets an existing Assistant resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAssistant(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AssistantState, opts ...pulumi.ResourceOption) (*Assistant, error) {
	var resource Assistant
	err := ctx.ReadResource("openai:index:Assistant", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Assistant resources.
type assistantState struct {
}

type AssistantState struct {
}

func (AssistantState) ElementType() reflect.Type {
	return reflect.TypeOf((*assistantState)(nil)).Elem()
}

type assistantArgs struct {
	// A list of file IDs attached to this assistant.
	FileIds []string `pulumi:"fileIds"`
	// The system instructions that the assistant uses.
	Instructions *string `pulumi:"instructions"`
	// Set of key-value pairs that can be used to store additional information about the assistant.
	Metadata map[string]string `pulumi:"metadata"`
	// The model that the assistant will use (e.g., gpt-4, gpt-3.5-turbo).
	Model string `pulumi:"model"`
	// The name of the assistant.
	Name string `pulumi:"name"`
	// The format of the response. Can be 'auto' or 'json_object'.
	ResponseFormat *string `pulumi:"responseFormat"`
	// What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
	Temperature *float64 `pulumi:"temperature"`
	// Tool resources for the assistant
	ToolResources map[string]string `pulumi:"toolResources"`
	// A list of tools enabled on the assistant.
	Tools []map[string]string `pulumi:"tools"`
	// An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.
	TopP *float64 `pulumi:"topP"`
}

// The set of arguments for constructing a Assistant resource.
type AssistantArgs struct {
	// A list of file IDs attached to this assistant.
	FileIds pulumi.StringArrayInput
	// The system instructions that the assistant uses.
	Instructions pulumi.StringPtrInput
	// Set of key-value pairs that can be used to store additional information about the assistant.
	Metadata pulumi.StringMapInput
	// The model that the assistant will use (e.g., gpt-4, gpt-3.5-turbo).
	Model pulumi.StringInput
	// The name of the assistant.
	Name pulumi.StringInput
	// The format of the response. Can be 'auto' or 'json_object'.
	ResponseFormat pulumi.StringPtrInput
	// What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
	Temperature pulumi.Float64PtrInput
	// Tool resources for the assistant
	ToolResources pulumi.StringMapInput
	// A list of tools enabled on the assistant.
	Tools pulumi.StringMapArrayInput
	// An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.
	TopP pulumi.Float64PtrInput
}

func (AssistantArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*assistantArgs)(nil)).Elem()
}

type AssistantInput interface {
	pulumi.Input

	ToAssistantOutput() AssistantOutput
	ToAssistantOutputWithContext(ctx context.Context) AssistantOutput
}

func (*Assistant) ElementType() reflect.Type {
	return reflect.TypeOf((**Assistant)(nil)).Elem()
}

func (i *Assistant) ToAssistantOutput() AssistantOutput {
	return i.ToAssistantOutputWithContext(context.Background())
}

func (i *Assistant) ToAssistantOutputWithContext(ctx context.Context) AssistantOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssistantOutput)
}

// AssistantArrayInput is an input type that accepts AssistantArray and AssistantArrayOutput values.
// You can construct a concrete instance of `AssistantArrayInput` via:
//
//	AssistantArray{ AssistantArgs{...} }
type AssistantArrayInput interface {
	pulumi.Input

	ToAssistantArrayOutput() AssistantArrayOutput
	ToAssistantArrayOutputWithContext(context.Context) AssistantArrayOutput
}

type AssistantArray []AssistantInput

func (AssistantArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Assistant)(nil)).Elem()
}

func (i AssistantArray) ToAssistantArrayOutput() AssistantArrayOutput {
	return i.ToAssistantArrayOutputWithContext(context.Background())
}

func (i AssistantArray) ToAssistantArrayOutputWithContext(ctx context.Context) AssistantArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssistantArrayOutput)
}

// AssistantMapInput is an input type that accepts AssistantMap and AssistantMapOutput values.
// You can construct a concrete instance of `AssistantMapInput` via:
//
//	AssistantMap{ "key": AssistantArgs{...} }
type AssistantMapInput interface {
	pulumi.Input

	ToAssistantMapOutput() AssistantMapOutput
	ToAssistantMapOutputWithContext(context.Context) AssistantMapOutput
}

type AssistantMap map[string]AssistantInput

func (AssistantMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Assistant)(nil)).Elem()
}

func (i AssistantMap) ToAssistantMapOutput() AssistantMapOutput {
	return i.ToAssistantMapOutputWithContext(context.Background())
}

func (i AssistantMap) ToAssistantMapOutputWithContext(ctx context.Context) AssistantMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssistantMapOutput)
}

type AssistantOutput struct{ *pulumi.OutputState }

func (AssistantOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Assistant)(nil)).Elem()
}

func (o AssistantOutput) ToAssistantOutput() AssistantOutput {
	return o
}

func (o AssistantOutput) ToAssistantOutputWithContext(ctx context.Context) AssistantOutput {
	return o
}

// The Unix timestamp (in seconds) for when the assistant was created.
func (o AssistantOutput) CreatedAt() pulumi.Float64Output {
	return o.ApplyT(func(v *Assistant) pulumi.Float64Output { return v.CreatedAt }).(pulumi.Float64Output)
}

// A list of file IDs attached to this assistant.
func (o AssistantOutput) FileIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Assistant) pulumi.StringArrayOutput { return v.FileIds }).(pulumi.StringArrayOutput)
}

// The unique identifier for the assistant.
func (o AssistantOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v *Assistant) pulumi.StringOutput { return v.Id }).(pulumi.StringOutput)
}

// The system instructions that the assistant uses.
func (o AssistantOutput) Instructions() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Assistant) pulumi.StringPtrOutput { return v.Instructions }).(pulumi.StringPtrOutput)
}

// Set of key-value pairs that can be used to store additional information about the assistant.
func (o AssistantOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Assistant) pulumi.StringMapOutput { return v.Metadata }).(pulumi.StringMapOutput)
}

// The model that the assistant uses.
func (o AssistantOutput) Model() pulumi.StringOutput {
	return o.ApplyT(func(v *Assistant) pulumi.StringOutput { return v.Model }).(pulumi.StringOutput)
}

// The name of the assistant.
func (o AssistantOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Assistant) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The object type, which is always 'assistant'.
func (o AssistantOutput) Object() pulumi.StringOutput {
	return o.ApplyT(func(v *Assistant) pulumi.StringOutput { return v.Object }).(pulumi.StringOutput)
}

// The format of the response. Can be 'auto' or 'json_object'.
func (o AssistantOutput) ResponseFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Assistant) pulumi.StringPtrOutput { return v.ResponseFormat }).(pulumi.StringPtrOutput)
}

// What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
func (o AssistantOutput) Temperature() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *Assistant) pulumi.Float64PtrOutput { return v.Temperature }).(pulumi.Float64PtrOutput)
}

// Tool resources for the assistant
func (o AssistantOutput) ToolResources() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Assistant) pulumi.StringMapOutput { return v.ToolResources }).(pulumi.StringMapOutput)
}

// A list of tools enabled on the assistant.
func (o AssistantOutput) Tools() pulumi.StringMapArrayOutput {
	return o.ApplyT(func(v *Assistant) pulumi.StringMapArrayOutput { return v.Tools }).(pulumi.StringMapArrayOutput)
}

// An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.
func (o AssistantOutput) TopP() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *Assistant) pulumi.Float64PtrOutput { return v.TopP }).(pulumi.Float64PtrOutput)
}

type AssistantArrayOutput struct{ *pulumi.OutputState }

func (AssistantArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Assistant)(nil)).Elem()
}

func (o AssistantArrayOutput) ToAssistantArrayOutput() AssistantArrayOutput {
	return o
}

func (o AssistantArrayOutput) ToAssistantArrayOutputWithContext(ctx context.Context) AssistantArrayOutput {
	return o
}

func (o AssistantArrayOutput) Index(i pulumi.IntInput) AssistantOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Assistant {
		return vs[0].([]*Assistant)[vs[1].(int)]
	}).(AssistantOutput)
}

type AssistantMapOutput struct{ *pulumi.OutputState }

func (AssistantMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Assistant)(nil)).Elem()
}

func (o AssistantMapOutput) ToAssistantMapOutput() AssistantMapOutput {
	return o
}

func (o AssistantMapOutput) ToAssistantMapOutputWithContext(ctx context.Context) AssistantMapOutput {
	return o
}

func (o AssistantMapOutput) MapIndex(k pulumi.StringInput) AssistantOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Assistant {
		return vs[0].(map[string]*Assistant)[vs[1].(string)]
	}).(AssistantOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AssistantInput)(nil)).Elem(), &Assistant{})
	pulumi.RegisterInputType(reflect.TypeOf((*AssistantArrayInput)(nil)).Elem(), AssistantArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AssistantMapInput)(nil)).Elem(), AssistantMap{})
	pulumi.RegisterOutputType(AssistantOutput{})
	pulumi.RegisterOutputType(AssistantArrayOutput{})
	pulumi.RegisterOutputType(AssistantMapOutput{})
}
